import groovy.json.JsonOutput

task generateTerraformTFVars {
    inputs.property("ENVIRONMENT_NAME", environmentName)
    inputs.property("ENVIRONMENT_TYPE", environmentType)
    inputs.property("AWS_ACCOUNT_ID", awsAccountId)
    inputs.property("AWS_ACCESS_KEY", awsAccessKey)
    inputs.property("AWS_SECRET_KEY", awsSecretKey)
    inputs.property("AWS_REGION", awsRegion)

    inputs.property("AZURE_LOCATION", AzureLocation)
    inputs.property("AZURE_ACCOUNT_ID", AzureAccountID)
    inputs.property("AZURE_SUBSCRIPTION_ID", AzureSubscriptionKey)
    inputs.property("AZURE_API_URL", AzureApiUrl)

    inputs.property("GOOGLE_SERVICE_CREDENTIALS_FILE", GoogleServiceCredentialsFile)
    inputs.property("GOOGLE_BUCKET_NAME", GoogleBucketName)

    inputs.property("ENABLE_ECS", EnableECS)

    def propertyFile = file("${projectDir}/terraform.tfvars.json")
    outputs.file(propertyFile)

    doLast {
        def data = [
                environment_name               : environmentName,
                environment_type               : environmentType,
                global_prefix                  : "${environmentName}.${environmentType}".replace(".", "-"),

                aws_account_id                 : awsAccountId,
                aws_access_key                 : awsAccessKey,
                aws_secret_key                 : awsSecretKey,
                aws_region                     : awsRegion,

                azure_location                 : AzureLocation,
                azure_account_id               : AzureAccountID,
                azure_subscription_key         : AzureSubscriptionKey,
                azure_api_url                  : AzureApiUrl,

                google_bucket_name             : GoogleBucketName,
                google_service_credentials_file: GoogleServiceCredentialsFile,

                ecs_enabled                    : EnableECS,
        ]

        def json = JsonOutput.toJson(data)
        def jsonPretty = JsonOutput.prettyPrint(json)

        propertyFile.write(jsonPretty)
    }
}

task generateTerraformWebsiteTF {
    dependsOn ":build"

    def websiteDir = file("../website/dist/website")
    inputs.dir websiteDir

    def websiteFileTfJson = file("storage/website_files.tf.json")
    outputs.file websiteFileTfJson

    doLast {
        def aws_s3_bucket_object = []
        def resource = ["aws_s3_bucket_object": aws_s3_bucket_object]
        def data = ["resource": resource]

        websiteDir.traverse { f ->
            if (f.isFile()) {
                def mimeType
                if (f.path.endsWith(".html")) {
                    mimeType = "text/html"
                } else if (f.path.endsWith(".css")) {
                    mimeType = "text/css"
                } else if (f.path.endsWith(".js")) {
                    mimeType = "application/javascript"
                } else if (f.path.endsWith(".json")) {
                    mimeType = "application/json"
                } else if (f.path.endsWith(".ico")) {
                    mimeType = "image/x-icon"
                } else if (f.path.endsWith(".txt")) {
                    mimeType = "text/plain"
                } else if (f.path.endsWith(".svg")) {
                    mimeType = "image/svg+xml"
                } else if (f.path.endsWith(".png")) {
                    mimeType = "image/png"
                } else if (f.path.endsWith(".woff")) {
                    mimeType = "font/woff"
                } else if (f.path.endsWith(".woff2")) {
                    mimeType = "font/woff2"
                } else if (f.path.endsWith(".eot")) {
                    mimeType = "application/vnd.ms-fontobject"
                } else if (f.path.endsWith(".ttf")) {
                    mimeType = "font/ttf"
                } else {
                    mimeType = "application/octet-stream"
                }

                def relativePath = websiteDir.relativePath(f).toString()
                def props = [
                        bucket      : "\${aws_s3_bucket.website.bucket}",
                        key         : relativePath,
                        source      : f.path.replace("\\", "/"),
                        content_type: mimeType,
                        etag        : "\${filemd5(\"${f.path.replace("\\", "/")}\")}"
                ]

                def filename = "file_${relativePath.replaceAll("[^a-zA-Z0-9]", "-")}"
                def object = [
                        "${filename}": props,
                ]

                aws_s3_bucket_object.add(object)
            }
        }

        def json = JsonOutput.toJson(data)
        def jsonPretty = JsonOutput.prettyPrint(json)

        websiteFileTfJson.write(jsonPretty)
    }
}

task generateAwsCredentialsJson {
    inputs.property("AWS_ACCESS_KEY", awsAccessKey)
    inputs.property("AWS_SECRET_KEY", awsSecretKey)
    inputs.property("AWS_REGION", awsRegion)

    def awsCredentialsJson = file("aws-credentials.json")
    outputs.file(awsCredentialsJson)

    doLast {
        def data = [
                accessKeyId    : awsAccessKey,
                secretAccessKey: awsSecretKey,
                region         : awsRegion
        ]

        def json = JsonOutput.toJson(data)
        def jsonPretty = JsonOutput.prettyPrint(json)

        awsCredentialsJson.write(jsonPretty)
    }
}

task terraformInit(type: Exec) {
    dependsOn ":verifyTerraform"
    inputs.file "main.tf"
    outputs.upToDateWhen { file(".terraform").exists() }
    commandLine terraformExecutable
    args "init"
}

task terraformInitUpgrade(type: Exec) {
    dependsOn ":verifyTerraform"
    inputs.file "main.tf"
    outputs.upToDateWhen { file(".terraform").exists() }
    commandLine terraformExecutable
    args "init", "-upgrade"
}

task terraformPlan(type: Exec) {
    dependsOn ":verifyTerraform"
    dependsOn ":build"
    dependsOn terraformInit
    dependsOn generateTerraformTFVars
    dependsOn generateTerraformWebsiteTF
    commandLine terraformExecutable
    args "plan"
}

task terraformApply(type: Exec) {
    dependsOn ":verifyTerraform"
    dependsOn ":build"
    dependsOn terraformInit
    dependsOn generateTerraformTFVars
    dependsOn generateTerraformWebsiteTF
    commandLine terraformExecutable
    args "apply", "-auto-approve"
}

task terraformDestroy(type: Exec) {
    dependsOn ":verifyTerraform"
    dependsOn terraformInit
    dependsOn generateTerraformTFVars
    dependsOn generateTerraformWebsiteTF
    commandLine terraformExecutable
    args "destroy", "-force"
}

task terraformOutput(type: Exec) {
    mustRunAfter terraformApply
    inputs.file("terraform.tfstate")
    outputs.file("terraform.output.json")
    commandLine terraformExecutable
    args "output", "-json"
    doFirst {
        standardOutput new FileOutputStream("${projectDir}/terraform.output.json")
    }
}

task clean {
    delete "${projectDir}/aws-credentials.json"
    delete "${projectDir}/terraform.output"
    delete "${projectDir}/terraform.output.json"
    delete "${projectDir}/storage/website.tf"
    delete "${projectDir}/storage/website_files.tf.json"
    delete "${projectDir}/terraform.output"
    delete "${projectDir}/terraform.output.json"
    delete "${projectDir}/terraform.tfvars"
    delete "${projectDir}/terraform.tfvars.json"
}

task plan {
    dependsOn(terraformPlan)
}

task deploy {
    dependsOn terraformApply
    dependsOn ":scripts:post-deploy:run"
}

task destroy {
    dependsOn(terraformDestroy)
}

task terraformTaintJobRepository(type: Exec) {
    commandLine terraformExecutable
    args "taint", "module.services.aws_api_gateway_deployment.job_repository_deployment"
}

task terraformTaintServiceRegistry(type: Exec) {
    commandLine terraformExecutable
    args "taint", "module.services.aws_api_gateway_deployment.service_registry_deployment"
}

task terraformTaintMediaRepository(type: Exec) {
    commandLine terraformExecutable
    args "taint", "module.services.aws_api_gateway_deployment.media_repository_deployment"
}

task terraformTaint {
    dependsOn terraformTaintJobRepository
    dependsOn terraformTaintServiceRegistry
    dependsOn terraformTaintMediaRepository
}
