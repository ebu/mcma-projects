import groovy.json.JsonOutput

task generateTerraformTFVars {
    inputs.property("environment_name", environmentName)
    inputs.property("environment_type", environmentType)
    inputs.property("aws_account_id", awsAccountId)
    inputs.property("aws_access_key", awsAccessKey)
    inputs.property("aws_secret_key", awsSecretKey)
    inputs.property("aws_region", awsRegion)

    def propertyFile = file("${projectDir}/terraform.tfvars.json")
    outputs.file(propertyFile)

    doLast {
        def data = [
                environment_name       : environmentName,
                environment_type       : environmentType,
                global_prefix          : "${environmentName}-${environmentType}",

                aws_account_id         : awsAccountId,
                aws_access_key         : awsAccessKey,
                aws_secret_key         : awsSecretKey,
                aws_region             : awsRegion,
        ]

        def json = JsonOutput.toJson(data)
        def jsonPretty = JsonOutput.prettyPrint(json)

        propertyFile.write(jsonPretty)
    }
}

task generateTerraformWebsiteTF {
    dependsOn ":build"

    def websiteDir = file("../website/dist/website")
    inputs.dir websiteDir

    def websiteFileTfJson = file("website_files.tf.json")
    outputs.file websiteFileTfJson

    doLast {
        def aws_s3_bucket_object = []
        def resource = ["aws_s3_bucket_object": aws_s3_bucket_object]
        def data = ["resource": resource]

        websiteDir.traverse { f ->
            if (f.isFile() && !f.path.endsWith("config.json")) {
                def mimeType
                if (f.path.endsWith(".html")) {
                    mimeType = "text/html"
                } else if (f.path.endsWith(".css")) {
                    mimeType = "text/css"
                } else if (f.path.endsWith(".js")) {
                    mimeType = "application/javascript"
                } else if (f.path.endsWith(".json")) {
                    mimeType = "application/json"
                } else if (f.path.endsWith(".ico")) {
                    mimeType = "image/x-icon"
                } else if (f.path.endsWith(".txt")) {
                    mimeType = "text/plain"
                } else if (f.path.endsWith(".svg")) {
                    mimeType = "image/svg+xml"
                } else if (f.path.endsWith(".png")) {
                    mimeType = "image/png"
                } else if (f.path.endsWith(".woff")) {
                    mimeType = "font/woff"
                } else if (f.path.endsWith(".woff2")) {
                    mimeType = "font/woff2"
                } else if (f.path.endsWith(".eot")) {
                    mimeType = "application/vnd.ms-fontobject"
                } else if (f.path.endsWith(".ttf")) {
                    mimeType = "font/ttf"
                } else {
                    mimeType = "application/octet-stream"
                }

                def relativePath = websiteDir.relativePath(f).toString()
                def props = [
                        bucket      : "\${aws_s3_bucket.website.bucket}",
                        key         : relativePath,
                        source      : f.path.replace("\\", "/"),
                        content_type: mimeType,
                        etag        : "\${filemd5(\"${f.path.replace("\\", "/")}\")}"
                ]

                def filename = "file_${relativePath.replaceAll("[^a-zA-Z0-9]", "-")}"
                def object = [
                        "${filename}": props,
                ]

                aws_s3_bucket_object.add(object)
            }
        }

        def json = JsonOutput.toJson(data)
        def jsonPretty = JsonOutput.prettyPrint(json)

        websiteFileTfJson.write(jsonPretty)
    }
}

task generateAwsCredentialsJson {
    inputs.property("AWS_ACCESS_KEY", "${awsAccessKey}")
    inputs.property("AWS_SECRET_KEY", "${awsSecretKey}")
    inputs.property("AWS_REGION", "${awsRegion}")

    def awsCredentialsJson = file("aws-credentials.json")
    outputs.file(awsCredentialsJson)

    doLast {
        def data = [
                accessKeyId    : awsAccessKey,
                secretAccessKey: awsSecretKey,
                region         : awsRegion
        ]

        def json = JsonOutput.toJson(data)
        def jsonPretty = JsonOutput.prettyPrint(json)

        awsCredentialsJson.write(jsonPretty)
    }
}

task terraformInit(type: Exec) {
    dependsOn ":verifyTerraform"
    inputs.file "main.tf"
    inputs.file "versions.tf"
    outputs.upToDateWhen { file(".terraform").exists() }
    commandLine terraformExecutable
    args "init"
}

task terraformPlan(type: Exec) {
    dependsOn ":verifyTerraform"
    dependsOn ":build"
    dependsOn terraformInit
    dependsOn generateTerraformTFVars
    dependsOn generateTerraformWebsiteTF
    commandLine terraformExecutable
    args "plan"
}

task terraformApply(type: Exec) {
    dependsOn ":verifyTerraform"
    dependsOn ":build"
    dependsOn terraformInit
    dependsOn generateTerraformTFVars
    dependsOn generateTerraformWebsiteTF
    commandLine terraformExecutable
    args "apply", "-auto-approve"
}

task terraformDestroy(type: Exec) {
    dependsOn ":verifyTerraform"
    dependsOn terraformInit
    dependsOn generateTerraformTFVars
    commandLine terraformExecutable
    args "destroy", "-force"
}

task terraformOutput(type: Exec) {
    dependsOn ":verifyTerraform"
    dependsOn terraformInit
    mustRunAfter terraformApply
    inputs.file("terraform.tfstate")
    outputs.file("terraform.output.json")
    commandLine terraformExecutable
    args "output", "-json"
    doFirst {
        standardOutput new FileOutputStream("${projectDir}/terraform.output.json")
    }
}

task clean(type: Delete) {
    delete "${projectDir}/.terraform"
    delete "${projectDir}/aws-credentials.json"
    delete "${projectDir}/terraform.output.json"
    delete "${projectDir}/terraform.tfvars.json"
}

task plan {}
plan.dependsOn(terraformPlan)

task apply {}
apply.dependsOn(terraformApply)

task deploy {}
deploy.dependsOn(apply)

task destroy {}
destroy.dependsOn(terraformDestroy)
