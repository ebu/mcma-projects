import groovy.json.JsonOutput

apply from: "${project.rootDir}/gradle-tasks-for-npm.gradle"

tsc.enabled = false

npmInstall {
  dependsOn ":libraries:model:npmPack"
}

task buildWebsite(type: Exec) {
  dependsOn npmInstall, ":verifyAngularCLI"
  inputs.dir "node_modules"
  inputs.dir "src"
  outputs.dir "dist/website"
  commandLine ngExecutable
  args "build", "--configuration", "production", "--base-href", "./index.html", "--progress", "false"
}

task generateTerraformWebsiteTF {
  dependsOn buildWebsite

  def websiteDir = file("dist/website")
  inputs.dir websiteDir

  def websiteFileTfJson = file("website_files.tf.json")
  outputs.file websiteFileTfJson

  doLast {
    def aws_s3_bucket_object = []
    def resource = ["aws_s3_bucket_object": aws_s3_bucket_object]
    def data = ["resource": resource]

    websiteDir.traverse { f ->
      if (f.isFile() && !f.path.endsWith("config.json")) {
        def mimeType
        if (f.path.endsWith(".html")) {
          mimeType = "text/html"
        } else if (f.path.endsWith(".css")) {
          mimeType = "text/css"
        } else if (f.path.endsWith(".js")) {
          mimeType = "application/javascript"
        } else if (f.path.endsWith(".json")) {
          mimeType = "application/json"
        } else if (f.path.endsWith(".ico")) {
          mimeType = "image/x-icon"
        } else if (f.path.endsWith(".txt")) {
          mimeType = "text/plain"
        } else if (f.path.endsWith(".svg")) {
          mimeType = "image/svg+xml"
        } else if (f.path.endsWith(".png")) {
          mimeType = "image/png"
        } else if (f.path.endsWith(".woff")) {
          mimeType = "font/woff"
        } else if (f.path.endsWith(".woff2")) {
          mimeType = "font/woff2"
        } else if (f.path.endsWith(".eot")) {
          mimeType = "application/vnd.ms-fontobject"
        } else if (f.path.endsWith(".ttf")) {
          mimeType = "font/ttf"
        } else {
          mimeType = "application/octet-stream"
        }

        def relativePath = websiteDir.relativePath(f).toString()
        def props = [
          bucket      : "\${aws_s3_bucket.website.bucket}",
          key         : relativePath,
          source      : f.path.replace("\\", "/"),
          content_type: mimeType,
          etag        : "\${filemd5(\"${f.path.replace("\\", "/")}\")}"
        ]

        def filename = "file_${relativePath.replaceAll("[^a-zA-Z0-9]", "_")}"
        def object = [
          "${filename}": props,
        ]

        aws_s3_bucket_object.add(object)
      }
    }

    def json = JsonOutput.toJson(data)
    def jsonPretty = JsonOutput.prettyPrint(json)

    websiteFileTfJson.write(jsonPretty)
  }
}

task build {
  dependsOn generateTerraformWebsiteTF
}
